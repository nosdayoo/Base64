#include <string>
#include <algorithm>

namespace base64 {
	namespace map_data {
		static std::string encode = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        static std::string decode = "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x3E\x40\x40\x40\x3F\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x40\x40\x40\x40\x40\x40\x40\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x40\x40\x40\x40\x40\x40\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40";
	}

	static std::string encode(const std::string& in) {
		int value = 0, value_bit = -6;
		std::string ret;

		for (auto& c : in) {
			value = (value << 8) + c;
			for (value_bit += 8; value_bit >= 0; value_bit -= 6) ret.push_back(map_data::encode[(value >> value_bit) & 0x3F]);
		}

		if (value_bit > -6) ret.push_back(map_data::encode[(value << 8) >> value_bit & 0x3F]);
		ret.append((4 - ret.size() % 4) % 4, '=');
		return ret;
	}

	static std::string decode(const std::string& in) {
		int value = 0, value_bit = -8;
		std::string ret;

		for (auto& c : in) {
			if (std::isspace(c) || c == '=') continue;
			if (map_data::decode[c] == 64) return "invalid!";
			value = (value << 6) + map_data::decode[c];
			if ((value_bit += 6) >= 0) {
				ret.push_back((value >> value_bit) & 0xFF);
				value_bit -= 8;
			}
		}
		return ret;
	}
}